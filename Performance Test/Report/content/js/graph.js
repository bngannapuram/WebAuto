/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3865.0, "minX": 0.0, "maxY": 344177.0, "series": [{"data": [[0.0, 3865.0], [0.1, 4088.0], [0.2, 4299.0], [0.3, 4748.0], [0.4, 4836.0], [0.5, 5616.0], [0.6, 5647.0], [0.7, 5780.0], [0.8, 5919.0], [0.9, 6144.0], [1.0, 6189.0], [1.1, 6562.0], [1.2, 6585.0], [1.3, 6779.0], [1.4, 7005.0], [1.5, 8225.0], [1.6, 8652.0], [1.7, 8962.0], [1.8, 9039.0], [1.9, 9303.0], [2.0, 9405.0], [2.1, 9542.0], [2.2, 9651.0], [2.3, 9665.0], [2.4, 9942.0], [2.5, 10050.0], [2.6, 10522.0], [2.7, 10855.0], [2.8, 10977.0], [2.9, 10987.0], [3.0, 11101.0], [3.1, 11151.0], [3.2, 11411.0], [3.3, 11574.0], [3.4, 11722.0], [3.5, 11765.0], [3.6, 11872.0], [3.7, 11908.0], [3.8, 12046.0], [3.9, 12128.0], [4.0, 12198.0], [4.1, 12353.0], [4.2, 12421.0], [4.3, 12844.0], [4.4, 12856.0], [4.5, 13108.0], [4.6, 13115.0], [4.7, 13191.0], [4.8, 13313.0], [4.9, 13406.0], [5.0, 13417.0], [5.1, 13696.0], [5.2, 13772.0], [5.3, 14192.0], [5.4, 14265.0], [5.5, 14408.0], [5.6, 14798.0], [5.7, 14895.0], [5.8, 15071.0], [5.9, 15164.0], [6.0, 15179.0], [6.1, 15201.0], [6.2, 15633.0], [6.3, 15668.0], [6.4, 15897.0], [6.5, 15956.0], [6.6, 16047.0], [6.7, 16055.0], [6.8, 16224.0], [6.9, 16254.0], [7.0, 16363.0], [7.1, 16525.0], [7.2, 16528.0], [7.3, 16597.0], [7.4, 16614.0], [7.5, 16746.0], [7.6, 16845.0], [7.7, 17028.0], [7.8, 17056.0], [7.9, 17156.0], [8.0, 17168.0], [8.1, 17492.0], [8.2, 17591.0], [8.3, 17727.0], [8.4, 17764.0], [8.5, 17824.0], [8.6, 17916.0], [8.7, 17990.0], [8.8, 18062.0], [8.9, 18193.0], [9.0, 18199.0], [9.1, 18363.0], [9.2, 18422.0], [9.3, 18433.0], [9.4, 18469.0], [9.5, 18503.0], [9.6, 18524.0], [9.7, 18557.0], [9.8, 18648.0], [9.9, 18676.0], [10.0, 18721.0], [10.1, 18774.0], [10.2, 18794.0], [10.3, 18825.0], [10.4, 18980.0], [10.5, 19179.0], [10.6, 19359.0], [10.7, 19401.0], [10.8, 19440.0], [10.9, 19677.0], [11.0, 19708.0], [11.1, 19872.0], [11.2, 19916.0], [11.3, 19940.0], [11.4, 20043.0], [11.5, 20130.0], [11.6, 20295.0], [11.7, 20605.0], [11.8, 20617.0], [11.9, 20641.0], [12.0, 20673.0], [12.1, 20714.0], [12.2, 20763.0], [12.3, 20792.0], [12.4, 20817.0], [12.5, 20881.0], [12.6, 20892.0], [12.7, 20912.0], [12.8, 21193.0], [12.9, 21298.0], [13.0, 21466.0], [13.1, 21525.0], [13.2, 21624.0], [13.3, 21656.0], [13.4, 21669.0], [13.5, 21797.0], [13.6, 21853.0], [13.7, 21855.0], [13.8, 21914.0], [13.9, 21993.0], [14.0, 22179.0], [14.1, 22215.0], [14.2, 22235.0], [14.3, 22251.0], [14.4, 22256.0], [14.5, 22427.0], [14.6, 22432.0], [14.7, 22638.0], [14.8, 22658.0], [14.9, 22674.0], [15.0, 22700.0], [15.1, 22901.0], [15.2, 22946.0], [15.3, 22993.0], [15.4, 22994.0], [15.5, 23044.0], [15.6, 23108.0], [15.7, 23175.0], [15.8, 23198.0], [15.9, 23262.0], [16.0, 23292.0], [16.1, 23373.0], [16.2, 23558.0], [16.3, 23561.0], [16.4, 23716.0], [16.5, 23731.0], [16.6, 23870.0], [16.7, 23871.0], [16.8, 23923.0], [16.9, 23934.0], [17.0, 23981.0], [17.1, 24041.0], [17.2, 24089.0], [17.3, 24175.0], [17.4, 24221.0], [17.5, 24271.0], [17.6, 24377.0], [17.7, 24404.0], [17.8, 24582.0], [17.9, 24621.0], [18.0, 24651.0], [18.1, 24747.0], [18.2, 24759.0], [18.3, 24909.0], [18.4, 24947.0], [18.5, 25077.0], [18.6, 25167.0], [18.7, 25219.0], [18.8, 25262.0], [18.9, 25537.0], [19.0, 25620.0], [19.1, 25652.0], [19.2, 25654.0], [19.3, 25733.0], [19.4, 25755.0], [19.5, 25869.0], [19.6, 25896.0], [19.7, 26012.0], [19.8, 26076.0], [19.9, 26142.0], [20.0, 26181.0], [20.1, 26193.0], [20.2, 26221.0], [20.3, 26421.0], [20.4, 26529.0], [20.5, 26537.0], [20.6, 26595.0], [20.7, 26603.0], [20.8, 26642.0], [20.9, 26893.0], [21.0, 26921.0], [21.1, 27036.0], [21.2, 27161.0], [21.3, 27168.0], [21.4, 27232.0], [21.5, 27248.0], [21.6, 27296.0], [21.7, 27447.0], [21.8, 27454.0], [21.9, 27546.0], [22.0, 27549.0], [22.1, 27601.0], [22.2, 27605.0], [22.3, 27688.0], [22.4, 27708.0], [22.5, 27795.0], [22.6, 27799.0], [22.7, 27909.0], [22.8, 27938.0], [22.9, 28061.0], [23.0, 28082.0], [23.1, 28192.0], [23.2, 28234.0], [23.3, 28240.0], [23.4, 28377.0], [23.5, 28427.0], [23.6, 28495.0], [23.7, 28511.0], [23.8, 28622.0], [23.9, 28647.0], [24.0, 28739.0], [24.1, 28742.0], [24.2, 28906.0], [24.3, 29010.0], [24.4, 29047.0], [24.5, 29187.0], [24.6, 29321.0], [24.7, 29342.0], [24.8, 29571.0], [24.9, 29578.0], [25.0, 29670.0], [25.1, 29691.0], [25.2, 29755.0], [25.3, 29799.0], [25.4, 29821.0], [25.5, 29832.0], [25.6, 29849.0], [25.7, 29993.0], [25.8, 30070.0], [25.9, 30197.0], [26.0, 30243.0], [26.1, 30277.0], [26.2, 30320.0], [26.3, 30387.0], [26.4, 30448.0], [26.5, 30519.0], [26.6, 30543.0], [26.7, 30560.0], [26.8, 30590.0], [26.9, 30625.0], [27.0, 30684.0], [27.1, 30763.0], [27.2, 30987.0], [27.3, 31009.0], [27.4, 31115.0], [27.5, 31115.0], [27.6, 31124.0], [27.7, 31219.0], [27.8, 31300.0], [27.9, 31325.0], [28.0, 31439.0], [28.1, 31554.0], [28.2, 31646.0], [28.3, 31648.0], [28.4, 31698.0], [28.5, 31699.0], [28.6, 31834.0], [28.7, 31997.0], [28.8, 32017.0], [28.9, 32221.0], [29.0, 32249.0], [29.1, 32372.0], [29.2, 32393.0], [29.3, 32454.0], [29.4, 32486.0], [29.5, 32517.0], [29.6, 32522.0], [29.7, 32581.0], [29.8, 32599.0], [29.9, 32646.0], [30.0, 32650.0], [30.1, 32690.0], [30.2, 32707.0], [30.3, 32886.0], [30.4, 32968.0], [30.5, 32976.0], [30.6, 33009.0], [30.7, 33014.0], [30.8, 33089.0], [30.9, 33146.0], [31.0, 33263.0], [31.1, 33388.0], [31.2, 33532.0], [31.3, 33548.0], [31.4, 33586.0], [31.5, 33651.0], [31.6, 33750.0], [31.7, 33773.0], [31.8, 34031.0], [31.9, 34103.0], [32.0, 34155.0], [32.1, 34188.0], [32.2, 34292.0], [32.3, 34341.0], [32.4, 34383.0], [32.5, 34520.0], [32.6, 34598.0], [32.7, 34625.0], [32.8, 34649.0], [32.9, 34732.0], [33.0, 34771.0], [33.1, 34785.0], [33.2, 34795.0], [33.3, 34914.0], [33.4, 35035.0], [33.5, 35086.0], [33.6, 35089.0], [33.7, 35151.0], [33.8, 35177.0], [33.9, 35191.0], [34.0, 35224.0], [34.1, 35316.0], [34.2, 35363.0], [34.3, 35370.0], [34.4, 35493.0], [34.5, 35499.0], [34.6, 35503.0], [34.7, 35533.0], [34.8, 35551.0], [34.9, 35575.0], [35.0, 35623.0], [35.1, 35639.0], [35.2, 35676.0], [35.3, 35712.0], [35.4, 35770.0], [35.5, 35884.0], [35.6, 35914.0], [35.7, 36091.0], [35.8, 36104.0], [35.9, 36248.0], [36.0, 36255.0], [36.1, 36305.0], [36.2, 36391.0], [36.3, 36407.0], [36.4, 36429.0], [36.5, 36462.0], [36.6, 36491.0], [36.7, 36523.0], [36.8, 36583.0], [36.9, 36613.0], [37.0, 36630.0], [37.1, 36675.0], [37.2, 36703.0], [37.3, 36732.0], [37.4, 36795.0], [37.5, 36835.0], [37.6, 36895.0], [37.7, 36929.0], [37.8, 37041.0], [37.9, 37062.0], [38.0, 37130.0], [38.1, 37141.0], [38.2, 37190.0], [38.3, 37213.0], [38.4, 37325.0], [38.5, 37333.0], [38.6, 37354.0], [38.7, 37410.0], [38.8, 37488.0], [38.9, 37542.0], [39.0, 37552.0], [39.1, 37591.0], [39.2, 37645.0], [39.3, 37757.0], [39.4, 37768.0], [39.5, 37962.0], [39.6, 37975.0], [39.7, 38187.0], [39.8, 38219.0], [39.9, 38258.0], [40.0, 38267.0], [40.1, 38347.0], [40.2, 38389.0], [40.3, 38467.0], [40.4, 38468.0], [40.5, 38500.0], [40.6, 38502.0], [40.7, 38552.0], [40.8, 38564.0], [40.9, 38607.0], [41.0, 38739.0], [41.1, 38808.0], [41.2, 38845.0], [41.3, 38903.0], [41.4, 38927.0], [41.5, 38927.0], [41.6, 38932.0], [41.7, 38944.0], [41.8, 39025.0], [41.9, 39098.0], [42.0, 39143.0], [42.1, 39155.0], [42.2, 39277.0], [42.3, 39287.0], [42.4, 39307.0], [42.5, 39348.0], [42.6, 39461.0], [42.7, 39637.0], [42.8, 39648.0], [42.9, 39649.0], [43.0, 39676.0], [43.1, 39716.0], [43.2, 39784.0], [43.3, 39823.0], [43.4, 39875.0], [43.5, 39931.0], [43.6, 39977.0], [43.7, 39996.0], [43.8, 40066.0], [43.9, 40083.0], [44.0, 40109.0], [44.1, 40118.0], [44.2, 40134.0], [44.3, 40228.0], [44.4, 40260.0], [44.5, 40315.0], [44.6, 40316.0], [44.7, 40333.0], [44.8, 40363.0], [44.9, 40497.0], [45.0, 40558.0], [45.1, 40571.0], [45.2, 40669.0], [45.3, 40682.0], [45.4, 40695.0], [45.5, 40719.0], [45.6, 40754.0], [45.7, 40799.0], [45.8, 40854.0], [45.9, 40894.0], [46.0, 40954.0], [46.1, 41105.0], [46.2, 41138.0], [46.3, 41174.0], [46.4, 41311.0], [46.5, 41316.0], [46.6, 41386.0], [46.7, 41468.0], [46.8, 41504.0], [46.9, 41598.0], [47.0, 41639.0], [47.1, 41728.0], [47.2, 41735.0], [47.3, 41766.0], [47.4, 41819.0], [47.5, 41860.0], [47.6, 41878.0], [47.7, 41943.0], [47.8, 41949.0], [47.9, 42025.0], [48.0, 42032.0], [48.1, 42063.0], [48.2, 42075.0], [48.3, 42075.0], [48.4, 42106.0], [48.5, 42113.0], [48.6, 42209.0], [48.7, 42223.0], [48.8, 42348.0], [48.9, 42350.0], [49.0, 42368.0], [49.1, 42461.0], [49.2, 42562.0], [49.3, 42564.0], [49.4, 42584.0], [49.5, 42592.0], [49.6, 42773.0], [49.7, 42852.0], [49.8, 42958.0], [49.9, 42963.0], [50.0, 43033.0], [50.1, 43050.0], [50.2, 43062.0], [50.3, 43126.0], [50.4, 43128.0], [50.5, 43160.0], [50.6, 43222.0], [50.7, 43334.0], [50.8, 43378.0], [50.9, 43463.0], [51.0, 43480.0], [51.1, 43511.0], [51.2, 43520.0], [51.3, 43688.0], [51.4, 43721.0], [51.5, 43734.0], [51.6, 43800.0], [51.7, 43882.0], [51.8, 43896.0], [51.9, 43980.0], [52.0, 44048.0], [52.1, 44064.0], [52.2, 44193.0], [52.3, 44307.0], [52.4, 44468.0], [52.5, 44478.0], [52.6, 44572.0], [52.7, 44621.0], [52.8, 44683.0], [52.9, 44691.0], [53.0, 44753.0], [53.1, 44757.0], [53.2, 44780.0], [53.3, 44790.0], [53.4, 44945.0], [53.5, 44995.0], [53.6, 44998.0], [53.7, 45208.0], [53.8, 45275.0], [53.9, 45309.0], [54.0, 45329.0], [54.1, 45388.0], [54.2, 45451.0], [54.3, 45498.0], [54.4, 45524.0], [54.5, 45623.0], [54.6, 45702.0], [54.7, 45740.0], [54.8, 45748.0], [54.9, 45808.0], [55.0, 45824.0], [55.1, 45838.0], [55.2, 45871.0], [55.3, 45902.0], [55.4, 45922.0], [55.5, 46017.0], [55.6, 46072.0], [55.7, 46073.0], [55.8, 46111.0], [55.9, 46119.0], [56.0, 46144.0], [56.1, 46226.0], [56.2, 46304.0], [56.3, 46346.0], [56.4, 46467.0], [56.5, 46521.0], [56.6, 46604.0], [56.7, 46623.0], [56.8, 46633.0], [56.9, 46642.0], [57.0, 46736.0], [57.1, 46748.0], [57.2, 46749.0], [57.3, 46847.0], [57.4, 46869.0], [57.5, 46899.0], [57.6, 47061.0], [57.7, 47092.0], [57.8, 47113.0], [57.9, 47247.0], [58.0, 47248.0], [58.1, 47268.0], [58.2, 47287.0], [58.3, 47379.0], [58.4, 47422.0], [58.5, 47431.0], [58.6, 47454.0], [58.7, 47464.0], [58.8, 47494.0], [58.9, 47591.0], [59.0, 47609.0], [59.1, 47629.0], [59.2, 47692.0], [59.3, 47699.0], [59.4, 47792.0], [59.5, 47814.0], [59.6, 47859.0], [59.7, 47877.0], [59.8, 47926.0], [59.9, 47977.0], [60.0, 48004.0], [60.1, 48014.0], [60.2, 48087.0], [60.3, 48089.0], [60.4, 48137.0], [60.5, 48150.0], [60.6, 48276.0], [60.7, 48307.0], [60.8, 48341.0], [60.9, 48439.0], [61.0, 48452.0], [61.1, 48576.0], [61.2, 48583.0], [61.3, 48678.0], [61.4, 48679.0], [61.5, 48715.0], [61.6, 48780.0], [61.7, 48812.0], [61.8, 48826.0], [61.9, 48893.0], [62.0, 48896.0], [62.1, 48923.0], [62.2, 48979.0], [62.3, 49001.0], [62.4, 49035.0], [62.5, 49049.0], [62.6, 49108.0], [62.7, 49108.0], [62.8, 49227.0], [62.9, 49232.0], [63.0, 49306.0], [63.1, 49410.0], [63.2, 49492.0], [63.3, 49507.0], [63.4, 49533.0], [63.5, 49581.0], [63.6, 49610.0], [63.7, 49615.0], [63.8, 49688.0], [63.9, 49792.0], [64.0, 49850.0], [64.1, 49860.0], [64.2, 50035.0], [64.3, 50049.0], [64.4, 50091.0], [64.5, 50161.0], [64.6, 50180.0], [64.7, 50266.0], [64.8, 50269.0], [64.9, 50282.0], [65.0, 50284.0], [65.1, 50296.0], [65.2, 50344.0], [65.3, 50417.0], [65.4, 50425.0], [65.5, 50468.0], [65.6, 50486.0], [65.7, 50602.0], [65.8, 50647.0], [65.9, 50778.0], [66.0, 50828.0], [66.1, 50920.0], [66.2, 50938.0], [66.3, 50990.0], [66.4, 51113.0], [66.5, 51135.0], [66.6, 51297.0], [66.7, 51309.0], [66.8, 51359.0], [66.9, 51394.0], [67.0, 51511.0], [67.1, 51512.0], [67.2, 51649.0], [67.3, 51688.0], [67.4, 51701.0], [67.5, 51709.0], [67.6, 51739.0], [67.7, 51813.0], [67.8, 51913.0], [67.9, 51932.0], [68.0, 51979.0], [68.1, 52040.0], [68.2, 52063.0], [68.3, 52115.0], [68.4, 52147.0], [68.5, 52169.0], [68.6, 52174.0], [68.7, 52222.0], [68.8, 52228.0], [68.9, 52300.0], [69.0, 52314.0], [69.1, 52358.0], [69.2, 52413.0], [69.3, 52482.0], [69.4, 52506.0], [69.5, 52517.0], [69.6, 52524.0], [69.7, 52536.0], [69.8, 52557.0], [69.9, 52598.0], [70.0, 52695.0], [70.1, 52713.0], [70.2, 52836.0], [70.3, 52868.0], [70.4, 52907.0], [70.5, 52911.0], [70.6, 52957.0], [70.7, 52973.0], [70.8, 52999.0], [70.9, 53041.0], [71.0, 53088.0], [71.1, 53116.0], [71.2, 53130.0], [71.3, 53359.0], [71.4, 53412.0], [71.5, 53422.0], [71.6, 53459.0], [71.7, 53534.0], [71.8, 53535.0], [71.9, 53598.0], [72.0, 53624.0], [72.1, 53692.0], [72.2, 53755.0], [72.3, 53851.0], [72.4, 53855.0], [72.5, 53864.0], [72.6, 53888.0], [72.7, 53994.0], [72.8, 54017.0], [72.9, 54073.0], [73.0, 54142.0], [73.1, 54203.0], [73.2, 54240.0], [73.3, 54243.0], [73.4, 54313.0], [73.5, 54321.0], [73.6, 54350.0], [73.7, 54354.0], [73.8, 54434.0], [73.9, 54461.0], [74.0, 54559.0], [74.1, 54580.0], [74.2, 54652.0], [74.3, 54663.0], [74.4, 54825.0], [74.5, 54850.0], [74.6, 54957.0], [74.7, 55001.0], [74.8, 55153.0], [74.9, 55175.0], [75.0, 55216.0], [75.1, 55309.0], [75.2, 55357.0], [75.3, 55470.0], [75.4, 55531.0], [75.5, 55611.0], [75.6, 55613.0], [75.7, 55766.0], [75.8, 55809.0], [75.9, 55886.0], [76.0, 55902.0], [76.1, 55956.0], [76.2, 56076.0], [76.3, 56166.0], [76.4, 56238.0], [76.5, 56322.0], [76.6, 56409.0], [76.7, 56522.0], [76.8, 56564.0], [76.9, 56671.0], [77.0, 56790.0], [77.1, 56800.0], [77.2, 56816.0], [77.3, 56841.0], [77.4, 56946.0], [77.5, 57026.0], [77.6, 57069.0], [77.7, 57178.0], [77.8, 57247.0], [77.9, 57277.0], [78.0, 57341.0], [78.1, 57431.0], [78.2, 57531.0], [78.3, 57584.0], [78.4, 57630.0], [78.5, 57650.0], [78.6, 57911.0], [78.7, 57944.0], [78.8, 57946.0], [78.9, 58077.0], [79.0, 58110.0], [79.1, 58194.0], [79.2, 58259.0], [79.3, 58336.0], [79.4, 58338.0], [79.5, 58462.0], [79.6, 58502.0], [79.7, 58544.0], [79.8, 58697.0], [79.9, 58798.0], [80.0, 58849.0], [80.1, 58908.0], [80.2, 58914.0], [80.3, 59017.0], [80.4, 59034.0], [80.5, 59056.0], [80.6, 59118.0], [80.7, 59137.0], [80.8, 59222.0], [80.9, 59424.0], [81.0, 59456.0], [81.1, 59494.0], [81.2, 59738.0], [81.3, 59776.0], [81.4, 59814.0], [81.5, 59838.0], [81.6, 59886.0], [81.7, 59912.0], [81.8, 59945.0], [81.9, 60073.0], [82.0, 60097.0], [82.1, 60106.0], [82.2, 60117.0], [82.3, 60259.0], [82.4, 60268.0], [82.5, 60416.0], [82.6, 60442.0], [82.7, 60514.0], [82.8, 60526.0], [82.9, 60637.0], [83.0, 60638.0], [83.1, 60699.0], [83.2, 60831.0], [83.3, 61071.0], [83.4, 61077.0], [83.5, 61096.0], [83.6, 61163.0], [83.7, 61225.0], [83.8, 61253.0], [83.9, 61290.0], [84.0, 61365.0], [84.1, 61365.0], [84.2, 61463.0], [84.3, 61495.0], [84.4, 61599.0], [84.5, 61720.0], [84.6, 61756.0], [84.7, 61870.0], [84.8, 61918.0], [84.9, 62010.0], [85.0, 62170.0], [85.1, 62215.0], [85.2, 62230.0], [85.3, 62342.0], [85.4, 62477.0], [85.5, 62492.0], [85.6, 62690.0], [85.7, 62703.0], [85.8, 62726.0], [85.9, 62831.0], [86.0, 63050.0], [86.1, 63132.0], [86.2, 63155.0], [86.3, 63352.0], [86.4, 63359.0], [86.5, 63476.0], [86.6, 63576.0], [86.7, 63591.0], [86.8, 63630.0], [86.9, 63661.0], [87.0, 63677.0], [87.1, 63773.0], [87.2, 63941.0], [87.3, 64101.0], [87.4, 64128.0], [87.5, 64227.0], [87.6, 64468.0], [87.7, 64485.0], [87.8, 64511.0], [87.9, 64629.0], [88.0, 64871.0], [88.1, 64951.0], [88.2, 65021.0], [88.3, 65133.0], [88.4, 65310.0], [88.5, 65435.0], [88.6, 65589.0], [88.7, 65637.0], [88.8, 65704.0], [88.9, 65759.0], [89.0, 66031.0], [89.1, 66084.0], [89.2, 66384.0], [89.3, 66402.0], [89.4, 66409.0], [89.5, 66648.0], [89.6, 66751.0], [89.7, 66881.0], [89.8, 67001.0], [89.9, 67153.0], [90.0, 67376.0], [90.1, 67648.0], [90.2, 67704.0], [90.3, 67902.0], [90.4, 68173.0], [90.5, 68203.0], [90.6, 68344.0], [90.7, 68572.0], [90.8, 68574.0], [90.9, 68644.0], [91.0, 68660.0], [91.1, 68913.0], [91.2, 69149.0], [91.3, 69188.0], [91.4, 69365.0], [91.5, 69368.0], [91.6, 69644.0], [91.7, 69953.0], [91.8, 70427.0], [91.9, 70446.0], [92.0, 70631.0], [92.1, 70903.0], [92.2, 70991.0], [92.3, 71119.0], [92.4, 71175.0], [92.5, 71215.0], [92.6, 71308.0], [92.7, 71414.0], [92.8, 71790.0], [92.9, 71856.0], [93.0, 71992.0], [93.1, 72131.0], [93.2, 72232.0], [93.3, 72524.0], [93.4, 72540.0], [93.5, 72766.0], [93.6, 72788.0], [93.7, 73151.0], [93.8, 73265.0], [93.9, 73423.0], [94.0, 73463.0], [94.1, 74101.0], [94.2, 74218.0], [94.3, 74559.0], [94.4, 74848.0], [94.5, 75373.0], [94.6, 75490.0], [94.7, 75607.0], [94.8, 77287.0], [94.9, 77959.0], [95.0, 78717.0], [95.1, 79874.0], [95.2, 80679.0], [95.3, 81209.0], [95.4, 81667.0], [95.5, 82007.0], [95.6, 82635.0], [95.7, 82949.0], [95.8, 83960.0], [95.9, 84403.0], [96.0, 87612.0], [96.1, 87922.0], [96.2, 88544.0], [96.3, 88636.0], [96.4, 89931.0], [96.5, 90040.0], [96.6, 90122.0], [96.7, 90471.0], [96.8, 90487.0], [96.9, 90712.0], [97.0, 90783.0], [97.1, 91933.0], [97.2, 92159.0], [97.3, 92842.0], [97.4, 93134.0], [97.5, 94319.0], [97.6, 94914.0], [97.7, 96480.0], [97.8, 97276.0], [97.9, 97802.0], [98.0, 98127.0], [98.1, 98361.0], [98.2, 99108.0], [98.3, 100015.0], [98.4, 101253.0], [98.5, 102163.0], [98.6, 104622.0], [98.7, 105570.0], [98.8, 106882.0], [98.9, 107265.0], [99.0, 111425.0], [99.1, 113863.0], [99.2, 130896.0], [99.3, 135588.0], [99.4, 164105.0], [99.5, 170398.0], [99.6, 212955.0], [99.7, 321737.0], [99.8, 332769.0], [99.9, 332833.0], [100.0, 344177.0]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3800.0, "maxY": 8.0, "series": [{"data": [[212900.0, 1.0], [68300.0, 2.0], [66700.0, 1.0], [69900.0, 2.0], [73100.0, 1.0], [77900.0, 1.0], [90700.0, 3.0], [32900.0, 3.0], [33700.0, 3.0], [34500.0, 2.0], [36100.0, 2.0], [35300.0, 4.0], [38500.0, 7.0], [37700.0, 2.0], [36900.0, 1.0], [39300.0, 2.0], [40100.0, 5.0], [40900.0, 2.0], [41700.0, 4.0], [42500.0, 5.0], [44100.0, 2.0], [43300.0, 2.0], [44900.0, 3.0], [45700.0, 5.0], [46500.0, 2.0], [48100.0, 4.0], [48900.0, 3.0], [47300.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [51300.0, 4.0], [52100.0, 5.0], [52900.0, 8.0], [54500.0, 3.0], [53700.0, 2.0], [56900.0, 2.0], [56100.0, 1.0], [55300.0, 2.0], [58500.0, 3.0], [60100.0, 2.0], [60900.0, 1.0], [63300.0, 3.0], [61700.0, 3.0], [62500.0, 1.0], [64100.0, 2.0], [64900.0, 1.0], [69000.0, 1.0], [67400.0, 1.0], [72200.0, 2.0], [70600.0, 1.0], [75400.0, 1.0], [97800.0, 1.0], [113800.0, 1.0], [3800.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [68100.0, 1.0], [66500.0, 1.0], [71300.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [74500.0, 1.0], [4900.0, 1.0], [5600.0, 2.0], [5700.0, 2.0], [92100.0, 1.0], [90500.0, 1.0], [6100.0, 3.0], [5900.0, 1.0], [6500.0, 3.0], [6700.0, 2.0], [108100.0, 1.0], [7000.0, 1.0], [7700.0, 1.0], [8600.0, 1.0], [8200.0, 1.0], [9000.0, 1.0], [9600.0, 3.0], [9400.0, 1.0], [10000.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [11800.0, 2.0], [12000.0, 2.0], [12200.0, 1.0], [12600.0, 1.0], [12400.0, 1.0], [12800.0, 2.0], [13400.0, 2.0], [13600.0, 2.0], [14200.0, 1.0], [14400.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [15200.0, 1.0], [15600.0, 2.0], [15800.0, 2.0], [16000.0, 3.0], [16200.0, 2.0], [16800.0, 1.0], [17600.0, 1.0], [18000.0, 2.0], [18400.0, 4.0], [18800.0, 1.0], [19200.0, 1.0], [19600.0, 1.0], [20000.0, 1.0], [20400.0, 1.0], [20800.0, 4.0], [21200.0, 1.0], [22400.0, 4.0], [22000.0, 1.0], [21600.0, 5.0], [22800.0, 1.0], [23200.0, 3.0], [24000.0, 3.0], [23600.0, 1.0], [24400.0, 2.0], [25200.0, 2.0], [24800.0, 1.0], [25600.0, 5.0], [26000.0, 3.0], [26400.0, 1.0], [27600.0, 4.0], [27200.0, 3.0], [26800.0, 1.0], [28000.0, 2.0], [28400.0, 3.0], [29600.0, 3.0], [28800.0, 1.0], [29200.0, 1.0], [30000.0, 1.0], [30400.0, 2.0], [31600.0, 6.0], [31200.0, 2.0], [32400.0, 3.0], [32000.0, 1.0], [32800.0, 2.0], [34400.0, 1.0], [33600.0, 1.0], [36000.0, 1.0], [35200.0, 1.0], [36800.0, 3.0], [37600.0, 2.0], [38400.0, 3.0], [39200.0, 4.0], [40800.0, 3.0], [40000.0, 3.0], [41600.0, 2.0], [42400.0, 2.0], [170300.0, 1.0], [43200.0, 2.0], [44800.0, 1.0], [44000.0, 3.0], [45600.0, 2.0], [46400.0, 1.0], [47200.0, 6.0], [48800.0, 5.0], [48000.0, 5.0], [50400.0, 5.0], [49600.0, 4.0], [52000.0, 3.0], [52800.0, 2.0], [51200.0, 2.0], [53600.0, 3.0], [54400.0, 3.0], [55200.0, 2.0], [56000.0, 2.0], [56800.0, 4.0], [57600.0, 3.0], [58400.0, 1.0], [59200.0, 2.0], [60000.0, 3.0], [60800.0, 1.0], [62400.0, 3.0], [64800.0, 2.0], [65600.0, 2.0], [70400.0, 2.0], [72000.0, 1.0], [76800.0, 1.0], [80000.0, 1.0], [81600.0, 1.0], [83200.0, 1.0], [88000.0, 1.0], [92800.0, 1.0], [104000.0, 1.0], [107200.0, 1.0], [332800.0, 1.0], [164100.0, 1.0], [67100.0, 1.0], [71900.0, 1.0], [81500.0, 1.0], [87900.0, 1.0], [94300.0, 1.0], [99100.0, 1.0], [105500.0, 1.0], [33100.0, 2.0], [34700.0, 6.0], [36300.0, 3.0], [35500.0, 7.0], [37100.0, 5.0], [37900.0, 3.0], [38700.0, 1.0], [40300.0, 6.0], [41900.0, 4.0], [41100.0, 4.0], [42700.0, 1.0], [43500.0, 2.0], [44300.0, 2.0], [46700.0, 4.0], [45900.0, 2.0], [48300.0, 2.0], [49100.0, 3.0], [47500.0, 1.0], [50700.0, 2.0], [52300.0, 4.0], [51500.0, 2.0], [53100.0, 3.0], [53900.0, 2.0], [54700.0, 1.0], [55500.0, 2.0], [56300.0, 2.0], [57100.0, 1.0], [57900.0, 5.0], [58700.0, 2.0], [61100.0, 1.0], [62700.0, 3.0], [61900.0, 2.0], [63500.0, 3.0], [65100.0, 1.0], [64300.0, 1.0], [69400.0, 1.0], [72600.0, 1.0], [74200.0, 1.0], [80600.0, 1.0], [88600.0, 1.0], [90200.0, 1.0], [98200.0, 1.0], [104600.0, 1.0], [344100.0, 1.0], [68500.0, 2.0], [73300.0, 1.0], [71700.0, 2.0], [322600.0, 1.0], [82900.0, 1.0], [102100.0, 1.0], [16500.0, 4.0], [17700.0, 3.0], [18100.0, 2.0], [18500.0, 4.0], [18900.0, 2.0], [19300.0, 1.0], [19700.0, 2.0], [20100.0, 2.0], [20900.0, 2.0], [21300.0, 1.0], [21700.0, 1.0], [22100.0, 1.0], [22900.0, 5.0], [23300.0, 1.0], [24100.0, 1.0], [24500.0, 1.0], [23700.0, 3.0], [24900.0, 3.0], [25300.0, 1.0], [26100.0, 4.0], [26500.0, 5.0], [25700.0, 2.0], [27300.0, 1.0], [26900.0, 2.0], [28100.0, 2.0], [28500.0, 2.0], [27700.0, 4.0], [29300.0, 2.0], [28900.0, 1.0], [29700.0, 3.0], [30500.0, 5.0], [30100.0, 2.0], [30900.0, 2.0], [31300.0, 2.0], [32500.0, 6.0], [32100.0, 1.0], [33000.0, 4.0], [34600.0, 3.0], [36200.0, 3.0], [35400.0, 3.0], [37000.0, 3.0], [38600.0, 1.0], [39400.0, 2.0], [40200.0, 2.0], [41800.0, 4.0], [42600.0, 1.0], [43400.0, 4.0], [45000.0, 1.0], [45800.0, 6.0], [46600.0, 6.0], [47400.0, 8.0], [49000.0, 5.0], [48200.0, 1.0], [49800.0, 4.0], [50600.0, 2.0], [52200.0, 4.0], [53000.0, 3.0], [51400.0, 1.0], [54600.0, 3.0], [53800.0, 5.0], [55400.0, 2.0], [57000.0, 3.0], [56200.0, 1.0], [58600.0, 1.0], [60200.0, 3.0], [61000.0, 4.0], [59400.0, 4.0], [61800.0, 1.0], [62600.0, 1.0], [63400.0, 1.0], [65000.0, 2.0], [64200.0, 1.0], [66000.0, 2.0], [67600.0, 1.0], [75600.0, 1.0], [77200.0, 1.0], [82000.0, 1.0], [90000.0, 1.0], [96400.0, 1.0], [101200.0, 1.0], [69100.0, 2.0], [65900.0, 1.0], [78700.0, 1.0], [86700.0, 1.0], [89900.0, 1.0], [93100.0, 1.0], [34100.0, 4.0], [33300.0, 1.0], [34900.0, 2.0], [36500.0, 3.0], [35700.0, 3.0], [37300.0, 4.0], [38900.0, 7.0], [38100.0, 1.0], [39700.0, 2.0], [40500.0, 3.0], [42100.0, 3.0], [42900.0, 3.0], [41300.0, 3.0], [43700.0, 3.0], [44500.0, 2.0], [45300.0, 4.0], [46100.0, 4.0], [47700.0, 2.0], [48500.0, 3.0], [50900.0, 4.0], [50100.0, 3.0], [49300.0, 1.0], [51700.0, 4.0], [52500.0, 8.0], [54100.0, 2.0], [54900.0, 1.0], [53300.0, 1.0], [56500.0, 2.0], [57300.0, 2.0], [55700.0, 1.0], [58100.0, 3.0], [58900.0, 3.0], [59700.0, 3.0], [60500.0, 4.0], [61300.0, 2.0], [62100.0, 1.0], [63700.0, 2.0], [64500.0, 1.0], [65300.0, 1.0], [68200.0, 2.0], [66600.0, 1.0], [71400.0, 1.0], [82600.0, 1.0], [95400.0, 1.0], [111400.0, 1.0], [68900.0, 1.0], [65700.0, 2.0], [67300.0, 1.0], [70500.0, 1.0], [72100.0, 1.0], [75300.0, 1.0], [126500.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [9300.0, 2.0], [9500.0, 1.0], [9900.0, 2.0], [10500.0, 2.0], [11100.0, 2.0], [10900.0, 3.0], [11500.0, 1.0], [11700.0, 2.0], [12100.0, 2.0], [11900.0, 1.0], [12300.0, 1.0], [13100.0, 4.0], [12900.0, 1.0], [13300.0, 2.0], [13700.0, 1.0], [14100.0, 2.0], [14700.0, 2.0], [15100.0, 3.0], [14900.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [16300.0, 2.0], [16100.0, 1.0], [17000.0, 3.0], [17400.0, 2.0], [16600.0, 2.0], [17800.0, 1.0], [19400.0, 2.0], [18600.0, 3.0], [19800.0, 1.0], [20200.0, 1.0], [20600.0, 6.0], [21400.0, 1.0], [22200.0, 5.0], [21800.0, 4.0], [22600.0, 4.0], [23000.0, 2.0], [23400.0, 1.0], [23800.0, 3.0], [24200.0, 4.0], [24600.0, 3.0], [25000.0, 1.0], [26200.0, 2.0], [26600.0, 3.0], [25800.0, 3.0], [27400.0, 2.0], [27000.0, 2.0], [27800.0, 1.0], [28200.0, 3.0], [28600.0, 3.0], [29000.0, 3.0], [30600.0, 3.0], [30200.0, 3.0], [29800.0, 4.0], [31000.0, 2.0], [31400.0, 2.0], [32600.0, 5.0], [31800.0, 1.0], [32200.0, 3.0], [33200.0, 1.0], [34000.0, 2.0], [35600.0, 4.0], [36400.0, 6.0], [38800.0, 3.0], [37200.0, 2.0], [38000.0, 1.0], [39600.0, 6.0], [40400.0, 1.0], [41200.0, 1.0], [42000.0, 7.0], [42800.0, 1.0], [44400.0, 2.0], [43600.0, 2.0], [45200.0, 3.0], [46800.0, 4.0], [46000.0, 5.0], [47600.0, 5.0], [48400.0, 4.0], [50000.0, 3.0], [50800.0, 1.0], [49200.0, 3.0], [52400.0, 3.0], [51600.0, 4.0], [54000.0, 3.0], [54800.0, 3.0], [55600.0, 3.0], [56400.0, 2.0], [57200.0, 3.0], [58000.0, 1.0], [58800.0, 2.0], [61200.0, 5.0], [59600.0, 1.0], [60400.0, 3.0], [62800.0, 1.0], [62000.0, 2.0], [63600.0, 4.0], [64400.0, 3.0], [65200.0, 1.0], [66400.0, 2.0], [69600.0, 1.0], [71200.0, 2.0], [72800.0, 1.0], [90400.0, 2.0], [100000.0, 1.0], [67900.0, 1.0], [66300.0, 1.0], [71100.0, 3.0], [72700.0, 2.0], [74300.0, 1.0], [82300.0, 1.0], [83900.0, 1.0], [93500.0, 1.0], [91900.0, 1.0], [98300.0, 1.0], [106300.0, 1.0], [153800.0, 1.0], [34300.0, 3.0], [33500.0, 4.0], [135500.0, 1.0], [35100.0, 5.0], [35900.0, 1.0], [36700.0, 4.0], [38300.0, 3.0], [37500.0, 4.0], [39900.0, 5.0], [39100.0, 3.0], [40700.0, 4.0], [41500.0, 3.0], [42300.0, 4.0], [332700.0, 1.0], [43100.0, 4.0], [44700.0, 6.0], [43900.0, 1.0], [46300.0, 4.0], [47100.0, 2.0], [45500.0, 1.0], [48700.0, 4.0], [47900.0, 4.0], [51100.0, 2.0], [49500.0, 5.0], [50300.0, 2.0], [51900.0, 5.0], [52700.0, 2.0], [53500.0, 4.0], [54300.0, 5.0], [55100.0, 3.0], [55900.0, 3.0], [56700.0, 1.0], [58300.0, 4.0], [57500.0, 3.0], [59100.0, 2.0], [59900.0, 3.0], [63100.0, 3.0], [61500.0, 2.0], [62300.0, 1.0], [63900.0, 2.0], [65500.0, 2.0], [67000.0, 2.0], [68600.0, 3.0], [73400.0, 3.0], [71800.0, 1.0], [75000.0, 1.0], [79800.0, 1.0], [97400.0, 1.0], [321700.0, 1.0], [172500.0, 1.0], [66100.0, 1.0], [67700.0, 2.0], [69300.0, 3.0], [70900.0, 3.0], [72500.0, 2.0], [74100.0, 1.0], [90100.0, 1.0], [88500.0, 1.0], [94900.0, 1.0], [98100.0, 1.0], [17100.0, 3.0], [16700.0, 1.0], [17500.0, 1.0], [17900.0, 3.0], [18300.0, 2.0], [18700.0, 5.0], [19100.0, 1.0], [19900.0, 3.0], [19500.0, 1.0], [20700.0, 4.0], [21500.0, 1.0], [21100.0, 1.0], [21900.0, 2.0], [23100.0, 4.0], [23500.0, 2.0], [22700.0, 1.0], [23900.0, 4.0], [24300.0, 1.0], [25100.0, 2.0], [24700.0, 2.0], [25500.0, 1.0], [27100.0, 3.0], [27500.0, 4.0], [27900.0, 3.0], [28300.0, 1.0], [28700.0, 2.0], [29100.0, 1.0], [29500.0, 3.0], [29900.0, 2.0], [30300.0, 3.0], [30700.0, 1.0], [31100.0, 4.0], [31500.0, 1.0], [32300.0, 2.0], [32700.0, 1.0], [31900.0, 2.0], [33400.0, 1.0], [34200.0, 1.0], [36600.0, 4.0], [35000.0, 4.0], [35800.0, 2.0], [38200.0, 4.0], [37400.0, 3.0], [39800.0, 3.0], [40600.0, 5.0], [39000.0, 3.0], [42200.0, 3.0], [41400.0, 2.0], [43000.0, 5.0], [43800.0, 4.0], [44600.0, 4.0], [45400.0, 3.0], [47000.0, 3.0], [46200.0, 1.0], [47800.0, 4.0], [48600.0, 2.0], [49400.0, 3.0], [50200.0, 8.0], [51000.0, 1.0], [51800.0, 1.0], [52600.0, 2.0], [53400.0, 5.0], [54200.0, 4.0], [55000.0, 1.0], [55800.0, 3.0], [56600.0, 2.0], [58200.0, 1.0], [59000.0, 4.0], [57400.0, 1.0], [59800.0, 4.0], [60600.0, 4.0], [61400.0, 3.0], [62200.0, 3.0], [63000.0, 2.0], [64600.0, 1.0], [65400.0, 1.0], [66800.0, 2.0], [73200.0, 1.0], [74800.0, 1.0], [81200.0, 1.0], [78000.0, 1.0], [84400.0, 1.0], [87600.0, 1.0], [89200.0, 1.0], [92400.0, 1.0], [97200.0, 1.0], [100400.0, 1.0], [106800.0, 1.0], [130800.0, 1.0]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 344100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1466.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1466.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.2, "minX": 1.5947244E12, "maxY": 653.0008539709644, "series": [{"data": [[1.5947244E12, 590.8663366336634], [1.59472458E12, 8.666666666666666], [1.59472446E12, 653.0008539709644], [1.59472476E12, 3.2], [1.59472452E12, 55.534090909090914]], "isOverall": false, "label": "Stepping Thread Group - UdemyPerf", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59472476E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9156.227272727272, "minX": 1.0, "maxY": 338473.0, "series": [{"data": [[2.0, 321737.0], [3.0, 332833.0], [5.0, 338473.0], [6.0, 212955.0], [7.0, 170398.0], [8.0, 172597.0], [10.0, 142353.5], [11.0, 164105.0], [12.0, 135588.0], [13.0, 113863.0], [14.0, 108195.0], [15.0, 106882.0], [16.0, 106328.0], [17.0, 105570.0], [18.0, 104622.0], [19.0, 126514.0], [20.0, 104046.0], [21.0, 95436.0], [22.0, 101253.0], [23.0, 111425.0], [24.0, 100015.0], [25.0, 97447.0], [26.0, 96480.0], [27.0, 107265.0], [28.0, 98127.0], [29.0, 93134.0], [30.0, 81571.0], [31.0, 91933.0], [33.0, 90471.0], [32.0, 84403.0], [35.0, 100437.0], [34.0, 90286.0], [37.0, 89237.0], [36.0, 60268.0], [39.0, 98361.0], [38.0, 99108.0], [41.0, 97802.0], [40.0, 98200.0], [43.0, 97276.0], [42.0, 102163.0], [45.0, 90529.0], [44.0, 74559.0], [47.0, 74355.0], [46.0, 74218.0], [49.0, 56409.0], [48.0, 73265.0], [50.0, 73423.0], [53.0, 85362.66666666667], [55.0, 93594.0], [54.0, 83284.0], [57.0, 92842.0], [56.0, 70427.0], [59.0, 90783.0], [58.0, 92422.0], [61.0, 69365.0], [60.0, 92159.0], [63.0, 90712.0], [62.0, 89931.0], [67.0, 90040.0], [66.0, 90122.0], [65.0, 67450.0], [64.0, 90487.0], [71.0, 88636.0], [70.0, 52907.0], [69.0, 90799.0], [68.0, 65913.0], [75.0, 66553.0], [74.0, 66648.0], [73.0, 46085.0], [72.0, 78092.0], [79.0, 66384.0], [78.0, 77287.0], [77.0, 63968.0], [76.0, 53888.0], [83.0, 45208.0], [82.0, 65435.0], [81.0, 66031.0], [80.0, 65637.0], [87.0, 50936.0], [86.0, 86735.0], [85.0, 64343.0], [84.0, 68173.0], [91.0, 36633.0], [90.0, 36703.0], [89.0, 63576.0], [88.0, 64227.0], [95.0, 37962.0], [94.0, 62726.0], [93.0, 39649.0], [92.0, 43091.0], [99.0, 62222.0], [98.0, 31950.0], [97.0, 62342.0], [96.0, 62471.0], [103.0, 41728.0], [102.0, 50344.0], [101.0, 61918.0], [100.0, 94319.0], [107.0, 49197.0], [106.0, 75490.0], [105.0, 82949.0], [104.0, 57431.0], [111.0, 71737.0], [110.0, 61756.0], [109.0, 71992.0], [108.0, 56238.0], [115.0, 53476.0], [114.0, 71414.0], [113.0, 72232.0], [112.0, 63677.0], [119.0, 59456.0], [118.0, 35177.0], [117.0, 63631.0], [116.0, 82635.0], [123.0, 59784.0], [122.0, 71215.0], [121.0, 59222.0], [120.0, 47977.0], [127.0, 70631.0], [126.0, 59841.0], [125.0, 82007.0], [124.0, 38412.0], [134.0, 34598.0], [133.0, 52413.0], [132.0, 25219.0], [131.0, 59118.0], [130.0, 69970.0], [129.0, 42063.0], [128.0, 81667.0], [143.0, 55309.0], [142.0, 43859.0], [141.0, 69368.0], [140.0, 59912.0], [139.0, 34341.0], [138.0, 59137.0], [137.0, 62889.0], [151.0, 40682.0], [150.0, 71856.0], [149.0, 58194.0], [148.0, 80679.0], [147.0, 60526.0], [146.0, 58908.0], [145.0, 40118.0], [144.0, 35502.0], [159.0, 31325.0], [158.0, 37410.0], [157.0, 57230.0], [156.0, 57178.0], [155.0, 68644.0], [154.0, 57944.0], [153.0, 37902.0], [152.0, 80079.0], [167.0, 67704.0], [166.0, 30461.0], [165.0, 68203.0], [164.0, 38552.0], [163.0, 56790.0], [162.0, 57026.0], [161.0, 29822.0], [160.0, 57531.0], [175.0, 67073.0], [174.0, 77959.0], [173.0, 34188.0], [172.0, 56679.0], [171.0, 39461.0], [170.0, 56816.0], [169.0, 50428.0], [168.0, 68363.0], [183.0, 43062.0], [181.0, 67648.0], [180.0, 46873.0], [179.0, 55886.0], [178.0, 56304.0], [177.0, 41949.0], [176.0, 55431.0], [191.0, 54649.0], [190.0, 55175.0], [189.0, 69188.0], [188.0, 34795.0], [187.0, 38230.0], [186.0, 30178.0], [185.0, 39143.0], [184.0, 55001.0], [199.0, 40363.0], [198.0, 65518.0], [197.0, 51511.0], [196.0, 34292.0], [195.0, 55153.0], [194.0, 66751.0], [193.0, 65759.0], [192.0, 41174.0], [207.0, 65589.0], [206.0, 54850.0], [205.0, 28739.0], [204.0, 56668.333333333336], [201.0, 88064.0], [200.0, 76882.0], [215.0, 24377.0], [214.0, 87922.0], [213.0, 87612.0], [212.0, 43511.0], [211.0, 54580.0], [210.0, 51265.0], [209.0, 38739.0], [208.0, 66084.0], [223.0, 54073.0], [222.0, 65133.0], [221.0, 29680.5], [219.0, 38891.0], [217.0, 53859.0], [216.0, 54327.0], [231.0, 54032.0], [230.0, 32275.0], [229.0, 64951.0], [228.0, 54142.0], [227.0, 58112.0], [226.0, 39098.0], [225.0, 65018.0], [224.0, 35885.0], [238.0, 64871.0], [237.0, 53692.0], [236.0, 53864.0], [235.0, 53130.0], [234.0, 35338.0], [233.0, 21466.0], [232.0, 65021.0], [247.0, 63941.0], [246.0, 48583.0], [245.0, 37594.5], [243.0, 35533.0], [242.0, 24221.0], [241.0, 52941.0], [240.0, 44928.0], [250.0, 9156.227272727272], [255.0, 53535.0], [254.0, 53041.0], [253.0, 63773.0], [252.0, 52598.0], [251.0, 53359.0], [249.0, 64489.0], [248.0, 34722.0], [270.0, 53087.0], [271.0, 74848.0], [269.0, 52063.0], [268.0, 63359.0], [267.0, 68572.0], [266.0, 24759.0], [265.0, 75076.0], [264.0, 37975.0], [263.0, 52228.0], [257.0, 64485.0], [256.0, 75373.0], [259.0, 37014.0], [258.0, 26603.0], [262.0, 52222.0], [261.0, 26508.0], [260.0, 23373.0], [286.0, 52695.0], [287.0, 25869.0], [285.0, 40249.5], [275.0, 33548.0], [274.0, 62596.5], [272.0, 51982.0], [283.0, 46736.0], [282.0, 63050.0], [281.0, 36391.0], [280.0, 63352.0], [279.0, 50143.0], [277.0, 52681.0], [276.0, 43033.0], [301.0, 74101.0], [302.0, 35770.0], [300.0, 36630.0], [291.0, 45290.0], [290.0, 52300.0], [289.0, 32605.0], [288.0, 32454.0], [299.0, 56936.0], [298.0, 41138.0], [297.0, 51339.0], [296.0, 52354.0], [295.0, 44048.0], [294.0, 51394.0], [293.0, 51901.0], [292.0, 45775.0], [318.0, 27799.0], [319.0, 29047.0], [317.0, 27795.0], [316.0, 50746.0], [315.0, 18524.0], [314.0, 26642.0], [313.0, 26909.0], [312.0, 62477.0], [311.0, 62215.0], [305.0, 20122.0], [304.0, 57405.0], [307.0, 30320.0], [306.0, 38327.0], [310.0, 50920.0], [309.0, 43062.0], [308.0, 39012.0], [335.0, 61546.0], [329.0, 31000.0], [334.0, 32690.0], [333.0, 31219.0], [332.0, 29821.0], [323.0, 26193.0], [322.0, 51297.0], [321.0, 30590.0], [320.0, 50602.0], [331.0, 20912.0], [330.0, 61915.0], [328.0, 58701.5], [326.0, 50535.0], [325.0, 35363.0], [324.0, 27036.0], [350.0, 34383.0], [351.0, 72766.0], [349.0, 72270.0], [348.0, 72131.0], [347.0, 49864.0], [346.0, 55766.0], [345.0, 37757.0], [344.0, 27708.0], [343.0, 61163.0], [337.0, 59776.0], [336.0, 72878.0], [339.0, 50647.0], [338.0, 50161.0], [342.0, 83960.0], [341.0, 25652.0], [340.0, 50124.0], [355.0, 50284.0], [366.0, 37552.0], [365.0, 35574.0], [354.0, 60831.0], [353.0, 50905.5], [363.0, 55925.5], [361.0, 35370.0], [360.0, 36929.0], [359.0, 61225.0], [358.0, 61599.0], [357.0, 72096.0], [356.0, 48137.0], [382.0, 50091.0], [383.0, 60097.0], [381.0, 61096.0], [380.0, 45075.0], [379.0, 61495.0], [378.0, 61290.0], [377.0, 43848.5], [375.0, 20714.0], [368.0, 66993.5], [370.0, 61365.0], [369.0, 18676.0], [374.0, 50393.0], [373.0, 48980.666666666664], [399.0, 48849.0], [398.0, 43872.666666666664], [387.0, 60514.0], [386.0, 34732.0], [385.0, 49555.0], [395.0, 60699.0], [394.0, 44001.0], [393.0, 40829.0], [392.0, 71238.0], [391.0, 49615.0], [390.0, 26206.0], [389.0, 49850.0], [388.0, 60667.0], [415.0, 52517.0], [409.0, 41346.5], [414.0, 49306.0], [413.0, 20817.0], [412.0, 29267.0], [403.0, 40214.0], [401.0, 48780.0], [400.0, 48014.0], [411.0, 40719.0], [410.0, 71308.0], [408.0, 30197.0], [407.0, 60106.0], [406.0, 23731.0], [405.0, 16360.0], [404.0, 82319.0], [431.0, 53855.0], [426.0, 20827.0], [430.0, 22256.0], [429.0, 49035.0], [428.0, 48150.0], [419.0, 48923.0], [418.0, 48341.0], [417.0, 71142.0], [416.0, 48812.0], [427.0, 21620.0], [425.0, 37542.0], [424.0, 31124.0], [423.0, 60259.0], [422.0, 27549.0], [421.0, 59777.0], [446.0, 48583.0], [434.0, 17109.0], [447.0, 31300.0], [445.0, 71149.0], [435.0, 47988.0], [443.0, 48678.0], [442.0, 14265.0], [441.0, 59494.0], [440.0, 56322.0], [439.0, 34914.0], [433.0, 33586.0], [432.0, 81209.0], [438.0, 30387.0], [437.0, 30448.0], [436.0, 59073.0], [460.0, 32548.333333333336], [462.0, 35551.0], [448.0, 29472.0], [463.0, 69416.0], [461.0, 55661.0], [457.0, 23981.0], [456.0, 29931.0], [455.0, 37473.25], [451.0, 47431.0], [450.0, 69149.0], [449.0, 41386.0], [478.0, 46899.0], [479.0, 42462.0], [477.0, 31997.0], [476.0, 48020.0], [475.0, 59056.0], [474.0, 63846.5], [472.0, 58205.0], [470.0, 47609.0], [465.0, 27447.0], [464.0, 48004.0], [467.0, 21861.0], [466.0, 58798.0], [469.0, 32976.0], [468.0, 47814.0], [494.0, 31554.0], [495.0, 46467.0], [493.0, 47591.0], [492.0, 58336.0], [491.0, 19291.0], [490.0, 39682.0], [489.0, 46629.0], [486.0, 47287.0], [481.0, 38564.0], [480.0, 58914.0], [483.0, 57247.0], [482.0, 28377.0], [485.0, 46662.0], [484.0, 58541.0], [510.0, 46847.0], [500.0, 15493.41573033708], [501.0, 33019.0], [503.0, 38258.0], [497.0, 47268.0], [496.0, 47454.0], [499.0, 46363.0], [498.0, 35623.0], [502.0, 47082.0], [511.0, 57069.0], [509.0, 45922.0], [508.0, 30625.0], [507.0, 72540.0], [506.0, 57506.0], [505.0, 57650.0], [504.0, 27661.0], [540.0, 46119.0], [543.0, 46051.0], [529.0, 68600.0], [528.0, 18372.0], [531.0, 17989.0], [530.0, 51813.0], [533.0, 57277.0], [532.0, 56841.0], [542.0, 78717.0], [541.0, 32707.0], [539.0, 46111.0], [538.0, 46017.0], [537.0, 27047.0], [536.0, 46073.0], [527.0, 46226.0], [513.0, 44998.0], [512.0, 17028.0], [515.0, 51625.0], [514.0, 68660.0], [517.0, 36895.0], [516.0, 45838.0], [519.0, 79874.0], [518.0, 46521.0], [526.0, 57325.0], [525.0, 68202.0], [524.0, 67902.0], [523.0, 45740.0], [522.0, 57341.0], [521.0, 46749.0], [520.0, 57584.0], [535.0, 17990.0], [534.0, 46301.0], [574.0, 66881.0], [547.0, 18584.5], [559.0, 50635.5], [544.0, 56805.0], [546.0, 44995.0], [545.0, 45605.0], [557.0, 67707.0], [556.0, 11151.0], [555.0, 21823.0], [554.0, 67376.0], [553.0, 45708.0], [552.0, 20130.0], [570.0, 28597.2], [575.0, 55902.0], [573.0, 56019.666666666664], [568.0, 25806.0], [551.0, 45824.0], [550.0, 45200.0], [548.0, 44945.0], [565.0, 40202.333333333336], [563.0, 18721.0], [561.0, 58544.0], [560.0, 44753.0], [604.0, 58849.0], [607.0, 25733.0], [593.0, 40909.0], [592.0, 28675.0], [595.0, 54897.0], [594.0, 66409.0], [597.0, 43723.0], [596.0, 43688.0], [606.0, 66173.0], [605.0, 23934.0], [603.0, 40539.0], [602.0, 20473.0], [601.0, 18444.0], [600.0, 44307.0], [591.0, 55233.0], [576.0, 47252.0], [579.0, 59424.0], [578.0, 44030.0], [581.0, 67001.0], [580.0, 44757.0], [583.0, 17441.0], [582.0, 55809.0], [590.0, 42562.0], [589.0, 55357.0], [588.0, 61418.0], [587.0, 22235.0], [586.0, 29578.0], [585.0, 33388.0], [584.0, 59034.0], [599.0, 48700.0], [598.0, 44353.0], [636.0, 47092.0], [639.0, 52482.0], [625.0, 24621.0], [624.0, 43050.0], [627.0, 54321.0], [626.0, 54957.0], [629.0, 19440.0], [628.0, 54784.0], [638.0, 22674.0], [637.0, 13345.0], [635.0, 42773.0], [634.0, 43378.0], [633.0, 43334.0], [632.0, 52557.0], [623.0, 43980.0], [609.0, 26595.0], [608.0, 29670.0], [612.0, 41754.0], [611.0, 65700.0], [615.0, 34905.0], [613.0, 44193.0], [622.0, 40627.0], [620.0, 38468.0], [619.0, 56166.0], [618.0, 32581.0], [617.0, 18422.0], [616.0, 44064.0], [631.0, 63591.0], [630.0, 65213.0], [664.0, 53946.0], [669.0, 53411.0], [671.0, 57416.0], [657.0, 54240.0], [656.0, 53534.0], [668.0, 53851.0], [667.0, 61014.5], [665.0, 53780.0], [655.0, 54354.0], [640.0, 34771.0], [643.0, 59945.0], [642.0, 43013.5], [645.0, 29849.0], [644.0, 33089.0], [647.0, 53994.0], [646.0, 43520.0], [654.0, 29832.0], [653.0, 43126.0], [652.0, 34775.5], [650.0, 55216.0], [649.0, 44175.5], [663.0, 26012.0], [662.0, 35166.0], [660.0, 42677.0], [659.0, 64649.0], [697.0, 41598.0], [701.0, 52080.0], [681.0, 37721.0], [680.0, 28575.0], [682.0, 21193.0], [684.0, 53459.0], [683.0, 22251.0], [686.0, 42106.0], [685.0, 47629.0], [696.0, 49581.0], [679.0, 50296.0], [678.0, 18503.0], [677.0, 52836.0], [676.0, 52868.0], [675.0, 41766.0], [674.0, 19916.0], [673.0, 75607.0], [672.0, 18062.0], [687.0, 42368.0], [692.0, 35569.0], [690.0, 52986.0], [689.0, 52911.0], [688.0, 41819.0], [693.0, 52999.0], [695.0, 64128.0], [694.0, 39637.0], [703.0, 51979.0], [702.0, 52506.0], [700.0, 47640.0], [699.0, 63576.0], [698.0, 41105.0], [730.0, 41124.0], [734.0, 73463.0], [722.0, 37273.5], [726.0, 37226.5], [725.0, 42082.0], [724.0, 29603.0], [723.0, 62690.0], [727.0, 40722.0], [735.0, 73365.0], [721.0, 40954.0], [720.0, 62703.0], [733.0, 62010.0], [732.0, 51701.0], [731.0, 51113.0], [729.0, 40754.0], [728.0, 40083.0], [719.0, 52513.0], [705.0, 19359.0], [704.0, 21914.0], [707.0, 52538.0], [706.0, 42592.0], [709.0, 51359.0], [708.0, 52206.0], [711.0, 40695.0], [710.0, 41468.0], [718.0, 20632.0], [717.0, 52174.0], [716.0, 42458.5], [714.0, 40571.0], [713.0, 41316.0], [712.0, 62770.0], [764.0, 50425.0], [750.0, 23796.208955223883], [749.0, 40109.0], [748.0, 73494.0], [747.0, 27168.0], [746.0, 73151.0], [745.0, 40260.0], [744.0, 40114.0], [767.0, 57923.0], [752.0, 61870.0], [754.0, 39996.0], [753.0, 55956.0], [757.0, 60945.0], [755.0, 50938.0], [766.0, 32517.0], [765.0, 21298.0], [763.0, 44914.0], [761.0, 50223.0], [760.0, 46072.0], [743.0, 50288.0], [742.0, 40228.0], [741.0, 72788.0], [740.0, 40106.5], [738.0, 39784.0], [737.0, 45659.0], [751.0, 62230.0], [759.0, 38927.0], [758.0, 39676.0], [796.0, 60073.0], [786.0, 41098.5], [785.0, 32646.0], [784.0, 71175.0], [787.0, 49227.0], [789.0, 49860.0], [788.0, 38467.0], [799.0, 59838.0], [798.0, 35832.0], [795.0, 37768.0], [794.0, 60400.0], [793.0, 48979.0], [792.0, 38944.0], [783.0, 49842.0], [768.0, 61085.0], [771.0, 57575.0], [769.0, 50282.0], [773.0, 49586.0], [772.0, 50049.0], [775.0, 18363.0], [774.0, 38267.0], [782.0, 39025.0], [781.0, 60510.0], [780.0, 60416.0], [779.0, 43709.5], [777.0, 50269.0], [776.0, 49610.0], [791.0, 38927.0], [790.0, 25620.0], [807.0, 59886.0], [828.0, 18774.0], [815.0, 36584.5], [814.0, 48471.0], [813.0, 70984.0], [812.0, 48576.0], [811.0, 55940.0], [810.0, 48896.0], [809.0, 54483.0], [820.0, 39570.5], [819.0, 48276.0], [818.0, 49000.0], [817.0, 37488.0], [816.0, 60117.0], [831.0, 37123.0], [830.0, 53577.5], [827.0, 47792.0], [826.0, 48464.0], [824.0, 59017.0], [806.0, 51688.0], [805.0, 59919.0], [804.0, 27551.0], [803.0, 49232.0], [802.0, 37542.0], [801.0, 49533.0], [800.0, 38607.0], [823.0, 28192.0], [822.0, 65402.5], [858.0, 47379.0], [862.0, 36438.0], [851.0, 34755.0], [852.0, 34738.5], [854.0, 64145.5], [861.0, 23599.5], [863.0, 47061.0], [850.0, 58462.0], [849.0, 58564.0], [860.0, 58502.0], [859.0, 47494.0], [857.0, 58110.0], [856.0, 47892.5], [847.0, 36726.0], [834.0, 59217.0], [837.0, 38187.0], [836.0, 42864.0], [839.0, 45524.0], [838.0, 48439.0], [846.0, 37041.0], [845.0, 36248.0], [844.0, 36255.0], [843.0, 37062.0], [842.0, 42338.5], [840.0, 47456.0], [892.0, 45748.0], [895.0, 45902.0], [880.0, 35660.0], [882.0, 46346.0], [881.0, 35746.0], [884.0, 57622.0], [883.0, 46748.0], [894.0, 56800.0], [893.0, 68344.0], [891.0, 34610.0], [890.0, 35086.0], [889.0, 45871.0], [888.0, 56946.0], [879.0, 46869.0], [865.0, 36613.0], [864.0, 69030.0], [867.0, 36732.0], [866.0, 57953.0], [869.0, 54434.0], [868.0, 35639.0], [871.0, 47113.0], [870.0, 46642.0], [878.0, 35150.0], [877.0, 57946.0], [876.0, 32372.0], [875.0, 57630.0], [874.0, 58077.0], [873.0, 24069.0], [872.0, 46604.0], [887.0, 35513.5], [885.0, 35493.0], [924.0, 30413.0], [922.0, 33730.5], [927.0, 54017.0], [912.0, 35575.0], [915.0, 45951.0], [913.0, 44532.0], [917.0, 27605.0], [916.0, 55531.0], [926.0, 38473.0], [925.0, 44478.0], [923.0, 56522.0], [921.0, 33773.0], [920.0, 66402.0], [911.0, 44790.0], [897.0, 46140.0], [896.0, 48893.0], [899.0, 34625.0], [898.0, 57062.0], [901.0, 39631.666666666664], [900.0, 67153.0], [903.0, 36491.0], [902.0, 45309.0], [910.0, 44774.0], [908.0, 56092.0], [907.0, 34146.5], [905.0, 44773.0], [904.0, 44756.0], [919.0, 40621.5], [918.0, 55470.0], [952.0, 53566.0], [957.0, 52713.0], [936.0, 30325.0], [937.0, 43484.0], [939.0, 42584.0], [938.0, 23561.0], [941.0, 48656.5], [940.0, 43222.0], [943.0, 42348.0], [928.0, 43721.0], [930.0, 41311.0], [929.0, 21604.0], [933.0, 46651.0], [931.0, 17153.0], [935.0, 54313.0], [934.0, 54243.0], [942.0, 54406.0], [946.0, 34034.5], [945.0, 54427.5], [947.0, 54559.0], [949.0, 42958.0], [948.0, 31627.5], [951.0, 42461.0], [950.0, 43007.0], [954.0, 26992.333333333332], [959.0, 42223.0], [958.0, 53412.0], [956.0, 64511.0], [955.0, 41941.5], [953.0, 42554.0], [988.0, 27161.0], [991.0, 42365.0], [977.0, 52536.0], [976.0, 63183.0], [979.0, 40844.0], [978.0, 46616.0], [981.0, 52433.0], [980.0, 43828.333333333336], [990.0, 50273.0], [989.0, 45345.0], [987.0, 29778.0], [986.0, 45605.0], [985.0, 34322.5], [984.0, 62492.0], [975.0, 53598.0], [960.0, 51512.0], [962.0, 63717.0], [961.0, 52973.0], [964.0, 52957.0], [963.0, 35884.0], [967.0, 52252.5], [965.0, 53088.0], [974.0, 35089.0], [973.0, 52281.0], [972.0, 49017.5], [971.0, 63391.0], [969.0, 41928.0], [968.0, 52298.0], [983.0, 44191.0], [982.0, 51714.0], [996.0, 43735.5], [1000.0, 35469.07391304348], [999.0, 37128.0], [998.0, 37109.857142857145], [997.0, 40991.333333333336], [995.0, 33262.5], [994.0, 44710.5], [993.0, 45712.99999999999], [992.0, 55769.5], [1.0, 322608.0]], "isOverall": false, "label": "HomePage", "isController": false}, {"data": [[603.9225543478258, 44926.32404891306]], "isOverall": false, "label": "HomePage-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.5947244E12, "maxY": 6374016.966666667, "series": [{"data": [[1.5947244E12, 1080056.7], [1.59472458E12, 34244.26666666667], [1.59472446E12, 6374016.966666667], [1.59472476E12, 175.9], [1.59472452E12, 483671.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5947244E12, 959.5], [1.59472458E12, 28.5], [1.59472446E12, 5562.25], [1.59472476E12, 0.0], [1.59472452E12, 418.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59472476E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17708.044554455446, "minX": 1.5947244E12, "maxY": 330824.8, "series": [{"data": [[1.5947244E12, 17708.044554455446], [1.59472458E12, 167460.3333333333], [1.59472446E12, 45083.05550811278], [1.59472476E12, 330824.8], [1.59472452E12, 80720.22727272724]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59472476E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3407.0247524752476, "minX": 1.5947244E12, "maxY": 9254.333333333334, "series": [{"data": [[1.5947244E12, 3407.0247524752476], [1.59472458E12, 9254.333333333334], [1.59472446E12, 6331.72758326217], [1.59472476E12, 4067.2], [1.59472452E12, 6530.090909090908]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59472476E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1470.6666666666665, "minX": 1.5947244E12, "maxY": 2353.5340909090905, "series": [{"data": [[1.5947244E12, 1488.7277227722773], [1.59472458E12, 1470.6666666666665], [1.59472446E12, 2236.0042698548255], [1.59472476E12, 1658.2], [1.59472452E12, 2353.5340909090905]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59472476E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3865.0, "minX": 1.5947244E12, "maxY": 212955.0, "series": [{"data": [[1.5947244E12, 34329.0], [1.59472458E12, 212955.0], [1.59472446E12, 94319.0], [1.59472452E12, 135588.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5947244E12, 4049.4209892070294], [1.59472458E12, 130896.0], [1.59472446E12, 14199.99896063447], [1.59472452E12, 31950.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5947244E12, 4090.046704084873], [1.59472458E12, 130896.0], [1.59472446E12, 14569.15775728941], [1.59472452E12, 31950.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5947244E12, 4072.0554946035145], [1.59472458E12, 130896.0], [1.59472446E12, 14328.868428388238], [1.59472452E12, 31950.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5947244E12, 3865.0], [1.59472458E12, 130896.0], [1.59472446E12, 4970.0], [1.59472452E12, 31950.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5947244E12, 17671.5], [1.59472458E12, 167251.5], [1.59472446E12, 45337.0], [1.59472452E12, 87639.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59472458E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 20833.5, "minX": 1.0, "maxY": 332769.0, "series": [{"data": [[2.0, 93475.5], [35.0, 47699.0], [34.0, 42562.0], [37.0, 46899.0], [38.0, 51566.0], [41.0, 44945.0], [43.0, 48812.0], [3.0, 64343.0], [48.0, 50566.5], [4.0, 27281.5], [5.0, 65536.0], [6.0, 22721.0], [7.0, 28605.5], [8.0, 21690.0], [9.0, 28061.0], [10.0, 20833.5], [11.0, 38826.5], [12.0, 24132.0], [13.0, 36462.0], [14.0, 40070.5], [15.0, 51512.0], [1.0, 99690.0], [16.0, 49591.0], [17.0, 42025.0], [19.0, 45049.5], [20.0, 59812.5], [21.0, 44468.0], [22.0, 43353.0], [24.0, 54825.0], [25.0, 52169.0], [27.0, 50288.0], [28.0, 50114.5], [29.0, 54032.0], [30.0, 50402.5], [31.0, 49229.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 29047.0], [5.0, 332769.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2340.0, "minX": 1.0, "maxY": 29046.0, "series": [{"data": [[2.0, 5027.0], [35.0, 4603.0], [34.0, 4922.0], [37.0, 5841.0], [38.0, 5304.0], [41.0, 4832.0], [43.0, 6338.0], [3.0, 4438.0], [48.0, 4019.5], [4.0, 2951.5], [5.0, 2547.5], [6.0, 2451.0], [7.0, 2799.5], [8.0, 3086.0], [9.0, 2407.0], [10.0, 2646.0], [11.0, 5022.5], [12.0, 2522.5], [13.0, 3808.0], [14.0, 3255.0], [15.0, 7589.0], [1.0, 5280.5], [16.0, 5166.5], [17.0, 2340.0], [19.0, 5279.5], [20.0, 4004.5], [21.0, 4883.0], [22.0, 4619.0], [24.0, 7688.5], [25.0, 2638.0], [27.0, 5270.0], [28.0, 5650.5], [29.0, 4776.0], [30.0, 5586.5], [31.0, 5290.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 29046.0], [5.0, 3116.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.5, "minX": 1.5947244E12, "maxY": 20.033333333333335, "series": [{"data": [[1.5947244E12, 20.033333333333335], [1.59472446E12, 4.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59472446E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5947244E12, "maxY": 19.5, "series": [{"data": [[1.5947244E12, 3.3666666666666667], [1.59472458E12, 0.1], [1.59472446E12, 19.5], [1.59472452E12, 1.4666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59472446E12, 0.016666666666666666]], "isOverall": false, "label": "408", "isController": false}, {"data": [[1.59472476E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59472476E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5947244E12, "maxY": 19.5, "series": [{"data": [[1.59472446E12, 0.016666666666666666], [1.59472476E12, 0.08333333333333333]], "isOverall": false, "label": "HomePage-failure", "isController": false}, {"data": [[1.5947244E12, 3.3666666666666667], [1.59472458E12, 0.1], [1.59472446E12, 19.5], [1.59472452E12, 1.4666666666666666]], "isOverall": false, "label": "HomePage-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59472476E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5947244E12, "maxY": 19.5, "series": [{"data": [[1.5947244E12, 3.3666666666666667], [1.59472458E12, 0.1], [1.59472446E12, 19.5], [1.59472452E12, 1.4666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59472446E12, 0.016666666666666666], [1.59472476E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59472476E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

